{package parser}

Input <- __ v1:(Object / Field*) EOF { return toInput(v1, c) }

Object <- LBRACE v1:Field* RBRACE { return toObject(v1, c) }

Field <- IfField / ForField / LetField / FieldField / KeyField / EmbeddedField

EmbeddedField <- v1:Expression COMMA? { return toEmbeddedField(v1, c) }

LetField <- LET v1:Identifier (ASSIGN/COLON) v2:Expression COMMA? { return toLetField(v1, v2, c) }

IfField <- v1:IfExpr COMMA? { return noop(v1) }

IfExpr <- IF v1:Expression v2:Object v3:ElseExpr? { return toIfField(v1, v2, v3, c) }

ElseExpr <- ELSE v1:(Object / IfExpr) { return toElse(v1, c) }

KeyField <- v1:Key COLON v2:Expression COMMA? { return toField(v1, v2, c) }

FieldField <- v1:Key COLON v2:(ForField / FieldField / KeyField) COMMA? { return toFieldField(v1, v2, c) }

ForField <- FOR v1:Identifier v2:(COMMA Identifier)? IN v3:Expression v4:Object COMMA? { return toForField(v1, v2, v3, v4, c) }

Key <- v1:(String / Identifier / KeyMatch) { return toKey(v1, c) }

KeyMatch <- LBRACKET REGEQ v1:String RBRACKET { return toKeyMatch(v1, c) }

Value <- Null / Boolean / Number / Array / Object / String

Null <- NULL { return toNull(c) }

Boolean <- v1:(TRUE / FALSE) { return toBool(v1, c) }

String <- TripleString / SingleString

SingleString <- StringStart v1:(!STRINGEND !EOL (Interpolation / Character))* STRINGEND { return toString(v1, c) }
TripleString <- TripleStringStart v1:(!TRIPLESTRINGEND (Interpolation / Character))* TRIPLESTRINGEND { return toString(v1, c) }

Interpolation <- "\\(" v1:Expression ')' { return noop(v1) }

Expression <- v1:Selector v2:(Op Selector)* { return toExpression(v1, v2, c) }

Selector <- v1:NOT? v2:(Parens / ListComprehension / Value / Identifier) v3:(DotLookup/SliceLookup/IndexLookup/Call)* { return toSelector(v1, v2, v3, c) }

ListComprehension <- LBRACKET FOR v1:Identifier v2:(COMMA Identifier)? IN v3:Expression v4:Object v5:(IF Expression)? RBRACKET { return toListComprehension(v1, v2, v3, v4, v5, c) }

Parens <- LPAREN v1:Expression RPAREN { return toParens(v1, c) }

DotLookup <- DOT v1:Identifier { return toDotLookup(v1, c) }
SliceLookup <- LBRACKET v1:Expression COLON v2:Expression RBRACKET { return toSliceLookup(v1, v2, c) }
IndexLookup <- LBRACKET v1:Expression RBRACKET { return toIndexLookup(v1, c) }
Call <- LPAREN v1:PositionalArgs v2:NamedArgs? RPAREN { return toCall(v1, v2, c) }

PositionalArgs <- v1:(!NamedArgs Expression)? v2:(COMMA !NamedArgs Expression)* { return toArray(v1, v2, c) }
NamedArgs <- v1:KeyField+ { return toObject(v1, c) }

Op <- v1:(MINUS / PLUS / MUL / DIVIDE / AND / OR / MERGE / EQUALS / NOTEQUALS / REGEQ / REGNEQ / LTE / GTE / LT / GT) { return newOp(v1, c) }

Array <- LBRACKET v1:Expression? v2:(COMMA Expression)* COMMA? RBRACKET { return toArray(v1, v2, c) }

Identifier <- IdentStart IdentCont* __ { return currentString(c) }
IdentStart <- [a-zA-Z_]
IdentCont <- IdentStart / Digit

Character <- ('\\' 'u' Hex Hex Hex Hex /
    '\\' [bfnrt'"\\] /
    [\n\r] /
    [\u0020-\u10FFFF]) { return toChar(c) }

Hex <- Digit / [a-fA-F]
Digit <- '0' / OneNine
OneNine <- [1-9]

Number <- Integer Fraction? Exponent? Suffix? __ { return toNumber(c) }
Integer <- OneNine DigitUnderscore+ / Digit / '-' OneNine DigitUnderscore+ / '-' Digit
DigitUnderscore <- '_' / Digit
Fraction <- '.' Digit+
Exponent <- [Ee] Sign? Digit+
Sign <- [-+]
Suffix <- BiSuffix / DecSuffix
BiSuffix <- [KkMmGgTtPpEeZzYy] 'i'
DecSuffix <- [KkMmGgTtPpEeZzYy]

__ <- v1:_* #{ return whitespace(v1, c) }
_ <- v1:(' ' / '\t' / EOL / Comment) { return space(c) }
Comment <- "//" (!EOL .)* EOL { return space(c) }
EOL <- "\r\n" / '\n' / '\r'
StringStart <- '"'
TripleStringStart <- "\"\"\""

// Tokens, these all consume trailing white space
NULL <- "null" __ { return currentString(c) }
TRUE <- "true" __ { return currentString(c) }
FALSE <- "false" __ { return currentString(c) }
LET <- "let" __ { return currentString(c) }
ASSIGN <- '=' __ { return currentString(c) }
NOT <- '!' __ { return currentString(c) }
IF <- "if" __ { return currentString(c) }
ELSE <- "else" __ { return currentString(c) }
IN <- "in" __ { return currentString(c) }
FOR <- "for" __ { return currentString(c) }
COMMA <- ',' __ { return currentString(c) }
LPAREN <- '(' __ { return currentString(c) }
RPAREN <- ')' __ { return currentString(c) }
LBRACE <- '{' __ { return currentString(c) }
RBRACE <- '}' __ { return currentString(c) }
LBRACKET <- '[' __ { return currentString(c) }
RBRACKET <- ']' __ { return currentString(c) }
MINUS <- '-' __ { return currentString(c) }
MUL <- '*' __ { return currentString(c) }
PLUS <- '+' __ { return currentString(c) }
DIVIDE <- '/' __ { return currentString(c) }
LT <- '<' __ { return currentString(c) }
LTE <- "<=" __ { return currentString(c) }
GT <- '>' __ { return currentString(c) }
GTE <- ">=" __ { return currentString(c) }
MERGE <- '&' __ { return currentString(c) }
EQUALS <- "==" __ { return currentString(c) }
NOTEQUALS <- "!=" __ { return currentString(c) }
AND <- "&&" __ { return currentString(c) }
OR <- "||" __ { return currentString(c) }
DOT <- '.' __ { return currentString(c) }
COLON <- ':' __ { return currentString(c) }
REGEQ <- "=~" __ { return currentString(c) }
REGNEQ <- "!~" __ { return currentString(c) }
STRINGEND <- '"' __ { return currentString(c) }
TRIPLESTRINGEND <- "\"\"\"" __ { return currentString(c) }

EOF <- !.
